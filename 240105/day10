
B-Tree 신입 개발자 질문에 많이 나오는 자료구조

테이블 설계할 때 자주 사용하는 컬럼을 위에 둔다.

-- 1월 5일 수업
-- 인덱스 
-- Primary key(기본키), 
-- EMP 테이블 기준으로 EMPNO 컬럼에 PK가 설정되어 있죠?
-- PK가 설정되어 있는 컬럼은 기본적(default)으로 NOT NULL과 ***인덱스가 생서됨

-- 인덱스(INDEX)란?
-- 데이터베이스가 데이터를 빨리 찾을 수 있게 도와줌
-- => 조회할 때, SELECT할 때 데이터를 더 빨리 찾을 수 있게 도와줌
-- 데이터가 적으면 오히려 인덱스는 성능저하의 원인이 된다.
-- 인덱스는 데이터가 많은 컬럼을 조회할 때 사용해야 한다.

-- 용어정리
-- 데이터베이스에서 인덱스 종류는 크게 2가지
-- 1. 클러스터 인덱스(Primary key 인덱스)
-- 2. 보조 인덱스(Unique)
-- => 실무에선 인덱스라고 한다.

-- ***MySQL은 FK컬럼에도 INDEX를 부여한다.(오라클은 아님)
-- 인덱스는 ***B_Tree라는 자료구조를 베이스로 실행된다.
-- 보조 인덱스는 일반 책에 목차와 같고, 클러스터 인덱스는 영어사전처럼 정렬되어 있다.
-- 데이터 양이 많으면 인덱스가 좋고, 데이터 양이 적은데 인덱스를 활용하면 오히려 성능낭비가 된다.

-- 인덱스 조회
show index from emp
-- empno를 조회하는 쿼리, empno에는 인덱스가 설정되어 있기 때문에 empno를 잘 활용해야 한다.
select empno from emp

-- 인덱스 생성
-- idx_emp_sal : 변수명, idx는 index 줄일말
-- 보조인덱스
-- sal 컬럼에 보조 인덱스 생성
create index idx_emp_sal on emp (sal)
create index idx_emp_hiredate on emp (hiredate)
-- 보조 인덱스는 여러 개 만들 수 있지만, 클러스터 인덱스는 1개만 만들 수 있다.

-- 급여컬럼과 입사날짜 컬럼에 인덱스를 부여한 상태, 인덱스를 활용해 보자.
-- 인덱스를 활용하기 위해서는 서술 논리절에 인덱스를 사용해야 한다.
-- 서술 논리절은 WHERE, ORDER BY, GROUP BY, HAVING을 의미한다.
-- 서술 논리절에 인덱스를 활용하는 SQL문을 *****사거블(Sargable) 쿼리라고 한다.
-- 1. WHERE절을 이용해 인덱스 활용하기
select sal, HIREDATE from emp where SAL > 1000

-- ***주의할 점 : 신입개발자들이 자주 실수하는 사거블 쿼리 모음
-- 1. LIKE 앞에 %을 붙이는 경우
-- ename 컬럼에 인덱스를 부여했다고 가정
-- LIKE '%H' 처럼 앞에 %을 사용하는 경우 인덱스가 실행불가.
select ename from emp where ename like '%H'
-- 아래 쿼리는 인덱스가 실행 됨
select ename from emp where ename like 'S%'
-- 2. WHERE절에 수치 연산을 하는 경우
-- 즉, WHERE절에 인덱스 컬럼인 sal에 연산을 함 => sal * 1.10
select empno, ename from emp where sal * 1.10 > 3000
-- 3. 한 개 이상의 필드에 대해 연산하는 함수를 사용하는 쿼리
-- date_format은 한 개 이상 필드에 연산하는 함수
select empno, ename from emp where date_format(HIREDATE, '%y') >= '1981' 
-- cast라는 함수를 이용해 hiredate에 직접 함수를 사용하지 않고 1981년도 이후 입사한 사원번호, 이름을 조회함.
select empno, ename from emp where hiredate >= cast('1981-01-01' as date)
-- 4. 전체 조회할 때
-- 데이터베이스가 판단할 때, 인덱스가 있더라도 전체 테이블을 검색하는 게 낫겠다고 판단해버림...
select empno, ename from emp where sal > 0

-- 인덱스는 부여했는데, 데이터베이스에서 인덱스를 활용하지 못하는 쿼리 (논 사거블 쿼리)
-- 1. LIKE 앞에 %가 있는 경우
-- 2. 사칙연산을 사용한 경우
-- 3. 함수를 사용한 경우
-- 4. 전체 조회하는 구문을 실행할 경우

-- 사거블 쿼리이지만 성능 향상 목적으로 사용하지 않는 것
-- 1. IN
-- 2. OR
-- EX) 아래 쿼리는 인덱스를 사용하지만 성능 향상 목적은 아님. why? IN을 사용했기 때문에~
select empno, ename from emp where sal in (1250, 3000)

-- 사거블 쿼리이면서 성능향상 목적!
-- 1. >, <, >=, <=, =
-- 2. BETWEEN
-- 3. LIKE(앞에 %을 붙이지 않을 때)
-- 4. IS [NOT] NULL
-- ex) 아래 쿼리는 사거블 쿼리이면서 성능 향상이 된다.
select empno, ename from emp where sal is null


show index from emp
-- 인덱스 삭제는 있지만 수정은 없음.
alter table emp drop index idx_emp_hiredate

-- 인덱스를 생성하는 다른 방법
-- 1. create index ~~ (보조 인덱스)
-- 2. primary key(클러스터 인덱스)
-- 3. create table emp (sal int(4) unique) --> unique 뒤에 붙임 (보조 인덱스)

-- 인덱스는 데이터가 많을 때 사용하며, 자주 이용하는 컬럼에 생성해주면 된다!
-- 사거블 쿼리와 논 사거블 쿼리를 주의하자!
-- 데이터가 없을 때 인덱스는 성능 낭비다.

### 프로시저(마지막 개념~)
-- 프로그래밍에서 함수와 같은 개념, 파라미터와 리턴값이 존재
-- 프로시저는 DB에 저장되어 필요할 때 호출되어 실행
-- 동일한 로직을 여러 번 사용할 필요가 있을 때 사용(재사용성)
-- 네트워크 비용이 감소하고 성능이 향상된다.(프로시저는 메모리에 계속 저장되어 있다~)
-- 빈도 수가 적은 SQL문은 굳이 프로시저로 두면 X (대규모 프로젝트에서 많이 사용함, 은행에서 많이 사용함)


-- 프로시저 호출하기
-- () 매개변수, 즉 매개변수가 없는 프로시저를 호출
-- 호출할때는 무조건 call 붙이기
-- 세미콜론은 마지막에만
call study.test_proce(1500)

call study.test_proce2()


-- 문제
-- int형 파라미터를 받는 프로시저를 생성후 
-- 파리미터 값이 20이라면 emp테이블 급여 30%인상
-- 아니라면 급여와 사원번호 조회
call study.test_proce3(10)


call study.test_proce4()

-- test_proce
CREATE PROCEDURE study.test_proce(x integer)
begin
	select empno, sal as employee_count from emp
	where sal > x;
end

-- test_proce2
CREATE PROCEDURE study.test_proce2()
begin
	declare x int;
	set x = 10;
	if x = 10 then
		select ename, sal from emp;
	else
		select count(*) from emp;
	end if;
end

-- test_proce3 (문제)
CREATE PROCEDURE study.test_proce3(num integer)
begin
	if num = 20 then
		update emp set sal = sal*1.3;
	else
		select sal, empno from emp;
	end if;
	
end

-- test_proce4
CREATE PROCEDURE study.test_proce4()
begin
	declare i int default 0;
	declare res int default 0;
	loop_test:loop
		if(i > 10) then
			leave loop_test;
		end if;
	set res = res + i;
	set i = i + 1;
	end loop;
	select res;
	
END










































